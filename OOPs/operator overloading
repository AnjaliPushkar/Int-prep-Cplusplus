#include<iostream>
using namespace std;

class Complex{
    int real;
    int img;
public:
    Complex(){
        real =0;
        img =0;
    }
//parameterised constructor
    Complex(int r, int i){
        real = r;
        img =i;
    }
//copy constructor
    void setReal(const int r){
        real = r;
    }
    void setImg(const int i){
        img = i;
    }
    int getReal() const{
        return real;
    }
    int getImg() const{
        return img;
    }
    void print(){
        if(img>0){
            cout<<real<<" + "<<img<<"i"<<endl;
        }
        else{
            cout<<real<<" - "<<-img<<"i"<<endl;
        }
    }
    void add(Complex &X){
        real += X.real;
        img += X.img;
    }
//operator overloading
//same as add fuctn
    void operator+(Complex &X){
        real += X.real;
        img += X.img;
    }
    void operator!(){
        img *= -1;
    }
    int operator[](string s){
        if(s=="real"){
            return real;
        }
        else{
            return img;
        }
    }
};
//for cin fucn
void operator>>(istream &is, Complex &c){
    int r1, i1;
    cin>>r1>>i1;
    c.setReal(r1);
    c.setImg(i1);
}
//for cout fucn
void operator<<(ostream& os, Complex &c){
    c.print();
}

int main(){
    Complex c1(5,4);
    Complex c2;
    c2.setImg(3);
    c2.setReal(6);

    c1.print();
    c2.print();

    c1.add(c2);//c1 = real(c1+c2) + img(c1+c2)
    c1.print();
    c2.print();

    c1+c2;//this and upper fucn works same
    c1.print();
    c2.print();

    !c1;
    c1.print();

    cout<<c1["real"]<<endl;

    //for<< >> operator
    Complex d;
    cin>>d;
    cout<<d;
    return 0;
}
/*
output:
5 + 4i
6 + 3i
11 + 7i
6 + 3i
17 + 10i
6 + 3i
17 - 10i
17
100 + 101i //if ip was 100,101
*/

