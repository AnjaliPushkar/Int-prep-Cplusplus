/*
find the no. of array such that arr[i]>arr[j] and i<j
ex : 1 5 2 6 3 0
op: 8
how: (1 0)(5 3)(5 2)(5 0)(2 0)(6 0)(3 0)(6 3)
*/

#include <iostream>
using namespace std;

int merge(int arr[], int s, int e){
    int mid = (s+e)/2;
    int i = s;
    int j = mid+1;
    int k = s;
    int temp[100000];
    int cnt=0;

    while(i<=mid and j<=e){
        if(arr[i]<=arr[j]){
            temp[k] = arr[i];
            k++;
            i++;
        }
        else{
            temp[k++] = arr[j++];
            cnt += mid - i + 1;
        }
    }
    //fill elements if some elements are left in one of the array
    while(i<=mid){
        temp[k++] = arr[i++];
    }
    while(j<=e){
        temp[k++] = arr[j++];
    }
    //copy all the elements from temp to main array 
    for(int i=s; i<=e; i++){
        arr[i] = temp[i];
    }
return cnt;
}

int inversion_count(int arr[], int s, int e){
   if(s>=e){
       return 0;
   }
   int mid = (s+e)/2;
   //divide the array
   int x = inversion_count(arr, s, mid);
   int y = inversion_count(arr, mid+1, e);

   //merge and count pairs
   int z = merge(arr, s,e);
   return x+y+z;

}

int main() {
    int arr[] = {1,5,2,6,3,0};
    int n = sizeof(arr)/sizeof(int);
    cout<<inversion_count(arr, 0, n-1)<<endl;
    return 0;

}

/*8*/